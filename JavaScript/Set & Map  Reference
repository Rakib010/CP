** Set Methods **

Method    	Description
new Set()	 Creates a new Set
add()    	 Adds a new element to the Set
delete()	 Removes an element from a Set
has()	     Returns true if a value exists in the Set
forEach()	 Invokes a callback for each element in the Set
values()	 Returns an iterator with all the values in a Set
Property	 Description
size	Returns the number of elements in a Set


  const letters = new Set(['a','b','c']);

  letters.add('d');
  letters.delete('a');
  console.log(letters);

   // Create a Set
const l = new Set(["a","b","c"]);

letters.forEach (function(value) {
    return value;
})
  console.log(l);



** Map Methods** 
Method	  Description
new Map() ->	Creates a new Map
set()    ->   Sets the value for a key in a Map
get()	   ->   Gets the value for a key in a Map
delete() ->   Removes a Map element specified by the key
has()	   ->   Returns true if a key exists in a Map
forEach()	->  Calls a function for each key/value pair in a Map
entries()	->  Returns an iterator with the [key, value] pairs in a Map
** Property **	    Description
 size	       Returns the number of elements in a Map


 // key - apples , vlaue - 500;
 const b = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);
  b.set("lemon",100);
 console.log(b);

// get method;
console.log(b.get("bananas"));

//has
 console.log(b.has("lemon"));
 
 // foreach
 b.forEach (function(value, key) {
   return value;
})
 console.log(b);

 // entries() Method
let text = "";
for (const x of b.entries()) {
  text += x;
}
console.log(text);

